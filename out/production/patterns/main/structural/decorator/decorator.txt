Decorator Pattern: Decorators are used to add responsibilities to objects dynamically.
 This pattern is often used to extend the behavior of classes in a flexible and reusable way.


 The Decorator Pattern is a powerful structural design pattern that comes with several advantages and some potential drawbacks.
 Here are the pros and cons of using the Decorator Pattern, along with guidance on when to use it:

 **Pros:**

 1. **Open-Closed Principle**: The Decorator Pattern follows the Open-Closed Principle,
  allowing you to add new functionality to an object without modifying its source code.
   This promotes code stability and maintainability.

 2. **Flexibility**: You can add or remove decorators at runtime,
  giving you fine-grained control over an object's behavior.
   This flexibility makes it easier to adapt to changing requirements.

 3. **Reusable Components**: Decorators can be reused across different classes,
  making it efficient to add similar functionalities to multiple objects.

 4. **Single Responsibility Principle**: Each decorator class has a single responsibility,
  which helps keep the code clean and adheres to the Single Responsibility Principle.

 5. **Combination of Features**: You can combine multiple decorators to create complex combinations of features or behaviors in an object.

 **Cons:**

 1. **Complexity**: Using too many decorators can lead to a complex class hierarchy with many small, specialized classes.
  This can make the code harder to understand and maintain.

 2. **Order of Decorators**: The order in which decorators are applied can affect the behavior of the object.
 Care must be taken to ensure that decorators are added in the correct order.

 3. **Performance Overhead**: Depending on the number of decorators and the complexity of their operations,
 there can be a slight performance overhead due to the additional method calls.

 **When to Use the Decorator Pattern:**

 1. **When you want to add responsibilities to objects dynamically**:
  If you need to extend the functionality of objects at runtime without modifying their existing code,
   the Decorator Pattern is a good choice.

 2. **When you have a class with multiple variants of behavior**:
  Instead of creating numerous subclasses for each variant,
   you can use decorators to add or modify behavior as needed.

 3. **When you want to keep classes open for extension but closed for modification**:
  If you want to follow the Open-Closed Principle,
   the Decorator Pattern provides a way to extend classes without changing their source code.

 4. **When you want to avoid a "fat" class with too many responsibilities**:
  Rather than having a single class that does everything,
   you can use decorators to keep each responsibility in a separate class.

 5. **When you need to create reusable and combinable components**:
  Decorators are highly reusable, and you can combine them in various ways to create different combinations of behaviors.

 In summary, the Decorator Pattern is a valuable tool for adding responsibilities to objects dynamically
  while maintaining code flexibility and reusability.
   It should be used when you anticipate the need to extend or modify the behavior of classes without altering their source code and
    when you want to follow SOLID principles such as the Open-Closed Principle and the Single Responsibility Principle.
     However, it should be used judiciously to avoid excessive complexity.